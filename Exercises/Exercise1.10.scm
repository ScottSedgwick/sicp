(load "check.scm")

(define (sqrt x)
  (define (abs a) (if (< a 0) (- a) a))
  (define (average a b) (/ (+ a b) 2))
  (define (goodenough g) (< (abs (- (/ x g) g)) 0.00001))
  (define (improve g) (average g (/ x g)))
  (define (try g) (if (goodenough g) g (try (improve g))))
  (try 1))

(define (sqrt-test)
  (check (< (abs (- (sqrt 4) 2)) 0.00001) => #t)
  (check-report))

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))

(define (A-test)
  (check (A  1 10) => 1024)
  (check (A  2  4) => 65536)
  (check (A  3  3) => 65536)
  (check-report)
  "OK"
)

(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))

(define (power n p)
  (cond ((= p 0) 1)
        ((= p 1) n)
        (else (* n (power n (- p 1))))))

(define (square n) (power n 2))

(define (f2 n) (* 2 n))
(define (f-test)
  (check (f 0) => (f2 0))
  (check (f 1) => (f2 1))
  (check (f 2) => (f2 2))
  (check (f 3) => (f2 3))
  (check (f 5) => (f2 5))
  (check-report)
)

(define (g2 n) 
  (if (= n 0) 0 (power 2 n)))

(define (g-test)
  (check (g 0) => (g2 0))
  (check (g 1) => (g2 1))
  (check (g 2) => (g2 2))
  (check (g 3) => (g2 3))
  (check (g 5) => (g2 5))
  (check-report)
)

(define (rp p n)
  (cond ((= n 1) p)
        (else (power p (rp p (- n 1))))))

(define (h2 n) 
  (cond ((= n 0) 0)
        ((= n 1) 2)
        (else (rp 2 n))))

(define (h-test)
  (check (h 0) => (h2 0))
  (check (h 1) => (h2 1))
  (check (h 2) => (h2 2))
  (check (h 3) => (h2 3))
  (check (h 4) => (h2 4))
  (check-report)
)

(define (k2 n) (* 5 (square n)))
(define (k-test)
  (check (k 0) => (k2 0))
  (check (k 1) => (k2 1))
  (check (k 2) => (k2 2))
  (check (k 3) => (k2 3))
  (check (k 5) => (k2 5))
  (check-report)
)