(ns sicp-clojure.exercise_01_12-test
  (:require [clojure.test :refer :all]
            [sicp-clojure.exercise_01_12 :refer :all]))

(deftest ex_01_12-test
  (testing "zip" (is (= (zip '(1 2 3) '(4 5 6)) '([1 4] [2 5] [3 6]))))
  (testing "sum-vector" (is (= (sum-vector [3 6]) 9)))
  (testing "sum-offset" (is (= (sum-offset '(1 2 3 4)) '(3 5 7))))
  (testing "append" (is (= (append '(1 2 3) 4) '(1 2 3 4))))
  (testing "pascal 0" (is (= (pascal 0) '(1))))
  (testing "pascal 1" (is (= (pascal 1) '(1 1))))
  (testing "pascal 2" (is (= (pascal 2) '(1 2 1))))
  (testing "pascal 3" (is (= (pascal 3) '(1 3 3 1))))
  (testing "pascal 4" (is (= (pascal 4) '(1 4 6 4 1))))
  (testing "pascal 5" (is (= (pascal 5) '(1 5 10 10 5 1))))
  (testing "pascal 6" (is (= (pascal 6) '(1 6 15 20 15 6 1))))
  (testing "pascal 7" (is (= (pascal 7) '(1 7 21 35 35 21 7 1))))
  (testing "pascal 8" (is (= (pascal 8) '(1 8 28 56 70 56 28 8 1))))
  (testing "pascal 9" (is (= (pascal 9) '(1 9 36 84 126 126 84 36 9 1))))
  (testing "pascal2 0" (is (= (pascal2 0) '(1))))
  (testing "pascal2 1" (is (= (pascal2 1) '(1 1))))
  (testing "pascal2 2" (is (= (pascal2 2) '(1 2 1))))
  (testing "pascal2 3" (is (= (pascal2 3) '(1 3 3 1))))
  (testing "pascal2 4" (is (= (pascal2 4) '(1 4 6 4 1))))
  (testing "pascal2 5" (is (= (pascal2 5) '(1 5 10 10 5 1))))
  (testing "pascal2 6" (is (= (pascal2 6) '(1 6 15 20 15 6 1))))
  (testing "pascal2 7" (is (= (pascal2 7) '(1 7 21 35 35 21 7 1))))
  (testing "pascal2 8" (is (= (pascal2 8) '(1 8 28 56 70 56 28 8 1))))
  (testing "pascal2 9" (is (= (pascal2 9) '(1 9 36 84 126 126 84 36 9 1))))
)